============
|auth|
============

.. _what_is_zextras_auth:

What is |auth|
====================

|auth| is the Zextras Suite module that influences the process of
accessing a Zextras instance from the Login Page onwards, including
the access modality. Depending on the authentication backends
configured, the access mask changes, to allow user to provide their
credentials using any of the backends. This also is reflected in the
:ref:`auth-user`.

|auth| allows to manage all the Authentication Strategies
(user/pwd, SAML, 2FA, MobilePwd, QrCode) and Service Authorizations
supported by Zextras.

This section is divided in three main parts and organised as follows.
Immediately below, you can find the description of all supported
authentication methods; the next two sections are dedicated to
:ref:`administration tasks <auth_zxauth-admins>`, which require
privileged access and are mostly carried out from the CLI, and
:ref:`everyday’s task <auth-user>`, which can be carried out
from the Web GUI by both administrators and users,
respectively. Finally, the :ref:`list of all CLI commands
<auth_zxauth-cli>` is given as a reference, with link to each command.

.. _auth_supported_authentication_methods:

Supported Authentication Methods
--------------------------------

|auth| supports the following backends:

-  Self service credentials management

   -  Mobile password management

   -  Application password

-  SAML integration

-  2FA Authentication using OTP token

-  Credential Management by CLI

.. _auth_self_service_credentials_management:

Self Service Credentials Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Self-service credential management allows every user to create new
passwords and QR codes for third-parties—​for example team members,
personal assistants—​accessing her/his email account and Zextras
Applications from mobile devices.

QR Codes in particular can be used to access Zextras Apps, currently
Team and Drive.

More information and step by step guidelines can be found in Section
:ref:`auth-user`.


SAML
~~~~

The Security Assertion Markup Language (**SAML**) is an XML-based open
standard data format for exchanging authentication information. It
enables web-based authentication and authorization scenarios including
cross-domain Single Sign-On (SSO), which allows the use of the same
credentials to access different applications.

SAML implementation in Zextras relies on an external IDentity Provider
(IDP), to which a user identifies; the IDP then passes authorization
credentials to a service providers (SP). SAML authentication is the
process of verifying the user’s identity and credentials. In Zextras
Suite, SAML requires little configuration, because an administrator can
generate the SAML configuration by importing SAML metadata from the ISP.
Each domain can have a different SAML endpoint and both SDP and IDP SAML
authentication is supported.

These are the key concepts of SAML authentication:

Service Provider
   (SP) is the entity providing the service.

Identity Provider
   (IdP) is the entity providing the identities.

SAML Request
   is generated by the Service Provider to "request" an authentication.

SAML Response
   is generated by the Identity Provider and contains the assertion of
   the authenticated user.

Moreover, the Assertion Consumer Service (ACS) endpoint is a location to
which the SSO tokens are sent, according to partner requirements.

Directions on how to configure SAML and integrate other applications
in Zextras Suite is described in Section :ref:`auth_set_up_saml`.

.. _auth_two-fa:

Two Factor Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~

Two Factor Authentication (usually spelled as **2FA**) adds a security
layer to the login phase, making unwanted accesses less likely to take
place. In Zextras, this additional layer is given by an One Time
Password (OTP), which can be read as a QR code on mobile devices.

When 2FA is configured on a Zextras domain, it is mandatory to have an
OTP to be able to login: providing only username and password will fail.
Moreover, the attribute ``zimbraAuthMech`` must be configured on the
domain with for 2FA to work properly.

2FA applies only to those protocols or apps supporting it, for example
HTTP and HTTPS but not to IMAP and SMTP, and can be configured at either
device, IP, or IP range level, by means of the ``trusted_device`` or
``trusted_ip`` parameter. When an IP or IP range is trusted, 2FA will be
successful for any login originating from there, while the
``trusted_device`` requires that the same browser or app be used,
otherwise it will fail: if a 2FA login is carried out on Chrome,
accessing the same page with Firefox will require a new login.

In order to use the OTP, a domain must be configured (see
:ref:`auth_qr-code-req`) by the site admin, while users can configure
it using the :ref:`Auth Zimlet <auth_zimlet-create-otp>`.

.. seealso:: Community Article

   https://community.zextras.com/improve-the-security-using-zextras-2fa/

   This article showcases a few deployment scenarios of 2FA in Zextras
   and describes how Administrators can take advantage of such
   architecture.

.. _auth_zxauth-admins:

|auth| for Admins
=================

This section is dedicated to administrators and the activities they
can carry out to manage and maintain |auth|. Here administrators can
find the requirements for the various authentication methods, then the
installation instructions and finally the credential management.

.. _auth_requirements:

Requirements
------------

.. _auth_qr-code-req:

QR Code Requirements
~~~~~~~~~~~~~~~~~~~~

The QR Code Application Password feature requires the following
properties to be set at domain level in order to be functional:

-  ``zimbraPublicServiceHostname``

-  ``zimbraPublicServicePort``

-  ``zimbraPublicServiceProtocol``

Should one or more of the properties be unset, a notification will be
delivered to the Admin reporting the affected domains and their missing
properties.

.. _auth_2fa_requirements:

2FA Requirements
~~~~~~~~~~~~~~~~

In order to properly have 2FA set up, the ``zimbraAuthMech`` attribute
bust be configured at domain level::

  zmprov modifyDomain example.com zimbraAuthMech custom:zx

To enable 2FA it is also necessary to:

- Enter the addresses of all mailbox and MTAs as
  ``ZimbraMailTrustedIp``, using the command ``zmprov`` to add either
  a single IP Address or a whole subnet as follows::

    zmprov mcf +zimbramailtrustedip IP_ADDRESS/32
    zmprov mcf +zimbramailtrustedip IP_SUBNET/NETMASK

-  A ``trusted ip range`` must be defined for all services

-  For all services the ``ip_can_change`` attribute must be validated on
   ``true`` and ``2fa_policy = 1``

.. warning:: 2FA requires a specific zimbraAuthMech and this makes it
   not compatible with other mechanism such as ldap, ad or kerberos5

.. _auth_saml_requirements:

SAML Requirements
~~~~~~~~~~~~~~~~~

Before enabling SAML login, it is necessary to modify the Zextras
Backend processing, because these header attributes are required to
compose the complete URL request: **Protocol X** and **X-Port**.

The files affected by this change are the templates:

-  ``nginx.conf.web.http.default.template``

-  ``nginx.conf.web.http.template``

-  ``nginx.conf.web.https.default.template``

-  ``nginx.conf.web.https.template``

In each of them, the ``location ^~ /zx/`` code should be changed.

.. code:: nginx

   location ^~ /zx/
     {
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-Forwarded-Proto $scheme;
         proxy_set_header X-Forwarded-Port $server_port;
         proxy_pass ${web.upstream.zx};
     }

.. _auth_installing_the_zextras_auth_zimlet:

Installing the |auth| Zimlet
----------------------------------

To deploy the |auth| Zimlet, simply run ``zxsuite auth
doDeployAuthZimlet`` as the zimbra user on any mailbox server of your
infrastructure.



.. _auth_set_up_saml:

Setting up SAML Configuration
-----------------------------

To integrate a SAML application into Zextras, you need to configure the
SAML IDP (IDentity Provider) using the Zextras SAML SP data. In our
sample scenario, we want to add SAML authentication to our domain
**example.com**, accessible at **SP_URL**.

The SAML configuration is carried out at an IDP provider, then imported
in Zextras Suite using a dedicated command.

The most important configuration options are the following. You should
configure them on the SAML IDP side.

``sp.entityid``
   **https://SP_URL/zx/auth/samlMetadata?domain=example.com**

``sp.assertion_consumer_service.url``
   **https://SP_URL/zx/auth/saml**

``sp.nameidformat``
   **urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress**

In order to validate against Zextras, make sure that the *Name of the
attribute that is used as* ``NameID`` is set to **mailPrimaryAddress**.

You can now integrate a SAML application in Zextras in two ways, either
automatic or manual. The following sections describe each method in
detail.

.. _auth_import_saml_configuration_automatically:

Import SAML Configuration Automatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SAML IDP provides a URL from which to download the configuration;
assuming that this URL is
https://my-saml-provider.org/simplesaml/saml/idp/metadata.php, you can
import the configuration using the command:

.. code:: bash

   zxsuite auth saml import example.com URL  https://my-saml-provider.org/simplesaml/saml/idp/metadata.php

.. note:: The URL supplied by the SAML IDP for an unsecured connection
   may be slight different from the previous one, like in our example.

.. code:: bash

   zxsuite auth saml import example.com url https://localidp.local.loc/app/xxxxxxxxxxxxxxx/sso/saml/metadata allow_unsecure true

You are now DONE! You can see the :bdg-primary-line:`LOGIN SAML` button on the login page.

.. figure:: /img/auth/saml-login.png
   :scale: 50%

   Login page with enabled SAML.

By clicking it, you will be redirect to the SAML IDP login page.

.. _auth_import_saml_configuration_manually:

Import SAML Configuration Manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you need to manually edit the SAML configuration, you need to
follow this 4-step procedure. In a nutshell, you need to export the
default SAML settings, modify them, then save and import them back.

.. grid::
   :gutter: 3

   .. grid-item-card::
      :columns: 6

      Step 1. Export the default SAML settings
      ^^^^^

      In order to export the default SAML setting, use

      .. code:: bash

         zxsuite auth saml get example.com export_to /tmp/saml.json

   .. grid-item-card::
      :columns: 6

      Step 2. Modify :file:`/tmp/saml.json`
      ^^^^^

      Open the resulting file :file:`/tmp/saml.json` in any editor and modify
      the requested attributes:


      - ``entityid``

      - ``assertion_consumer_service.url``

      - ``nameidformat``

   .. grid-item-card::
      :columns: 6

      Step 3. Check modified  :file:`/tmp/saml.json`
      ^^^^^

      The :file:`/tmp/saml.json`` file should look similar to this
      one:

      .. dropdown::

         .. code:: json

            {
              "sp.entityid":"https://SP_URL/zx/auth/samlMetadata?domain=example.com",
              "sp.assertion_consumer_service.url":"https://SP_URL/zx/auth/saml",
              "sp.nameidformat":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
              "sp.assertion_consumer_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
              "sp.single_logout_service.url":"https://SP_URL/?loginOp=logout",
              "sp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "sp.x509cert":"aabbcc",

              "idp.entityid":"https://IDP-URL/simplesamlphp/saml2/idp/metadata.php",
              "idp.x509cert":"xxyyzz",
              "idp.single_sign_on_service.url":"https://IDP-URL/simplesamlphp/saml2/idp/SSOService.php",
              "idp.single_sign_on_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "idp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",

              "organization.name":"ACME, INC.",
              "organization.displayname":"Example",
              "organization.url":"https://www.example.com/",

              "security.requested_authncontextcomparison":"exact",
              "security.requested_authncontext":"urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password",
              "security.signature_algorithm":"http://www.w3.org/2000/09/xmldsig#rsa sha1",
              "security.logoutresponse_signed":"false",
              "security.want_nameid_encrypted":"false",
              "security.want_assertions_encrypted":"false",
              "security.want_assertions_signed":"false","debug":"true",
              "security.want_messages_signed":"false",
              "security.authnrequest_signed":"false",
              "security.want_xml_validation":"true",
              "security.logoutrequest_signed":"false"
            }


      Values appearing in the above code excerpt are taken from the
      example in the previous section. Certificates must be valid,
      they are omitted for clarity.

   .. grid-item-card::
      :columns: 6

      Step 4. Save the changes
      ^^^^^^

      The final step is to save the changes made to the file and import
      it into Zextras Suite using the command:

      .. code:: bash

         zxsuite auth saml import example.com /tmp/saml.json

      .. hint:: It is also possible to view or edit single attributes
         by using the ``zxsuite auth saml get`` and ``zxsuite auth saml
         set`` command options.

.. _temp_auth_link:

Temporary Auth Link
-------------------

A typical user-management task that an administrator needs to carry
out is to allow the first access to the company's infrastructure to a
new colleague or employee.

When 2FA is enabled on the mailstore, a new user can not login
immediately, therefore the solution is to provide a temporary link
(*auth link*) that allows the user to access and configure 2FA.

Administrators can generate a auth link easily from the
Administration GUI:

#. In the user's **General Information** section, in box called
   *Temporary link*, click the :bdg:`Create a temporary link` button

#. A URL link will be shown in an overlay window and can be copied by
   clicking on the accompanying button

#. The link can then be sent to the new user

#. The user must access the mailbox within 12 hours before the link
   expires



.. _auth_zxauth-cli:

..
   |auth| CLI
   ================

   This section contains the index of all ``zxsuite auth`` commands. Full
   reference can be found in the dedicated section
   :ref:`zextras_auth_full_cli`.

   :ref:`credential add <zxsuite_auth_credential_add>`
   :octicon:`dash` :ref:`credential delete <zxsuite_auth_credential_delete>`
   :octicon:`dash` :ref:`credential list <zxsuite_auth_credential_list>`
   :octicon:`dash` :ref:`credential update <zxsuite_auth_credential_update>`
   :octicon:`dash` :ref:`doDeployAuthZimlet <zxsuite_auth_doDeployAuthZimlet>`
   :octicon:`dash` :ref:`doRestartService <zxsuite_auth_doRestartService>`
   :octicon:`dash` :ref:`doStartService <zxsuite_auth_doStartService>`
   :octicon:`dash` :ref:`doStopService <zxsuite_auth_doStopService>`
   :octicon:`dash` :ref:`enforce2FA get account <zxsuite_auth_enforce2FA_get_account>`
   :octicon:`dash` :ref:`enforce2FA get cos <zxsuite_auth_enforce2FA_get_cos>`
   :octicon:`dash` :ref:`enforce2FA set account <zxsuite_auth_enforce2FA_set_account>`
   :octicon:`dash` :ref:`enforce2FA set cos <zxsuite_auth_enforce2FA_set_cos>`
   :octicon:`dash` :ref:`getServices <zxsuite_auth_getServices>`
   :octicon:`dash` :ref:`loginPage getBackgroundImage domain <zxsuite_auth_loginPage_getBackgroundImage_domain>`
   :octicon:`dash` :ref:`loginPage getBackgroundImage global <zxsuite_auth_loginPage_getBackgroundImage_global>`
   :octicon:`dash` :ref:`loginPage getColorPalette domain <zxsuite_auth_loginPage_getColorPalette_domain>`
   :octicon:`dash` :ref:`loginPage getColorPalette global <zxsuite_auth_loginPage_getColorPalette_global>`
   :octicon:`dash` :ref:`loginPage getConfig domain <zxsuite_auth_loginPage_getConfig_domain>`
   :octicon:`dash` :ref:`loginPage getConfig global <zxsuite_auth_loginPage_getConfig_global>`
   :octicon:`dash` :ref:`loginPage getFavicon domain <zxsuite_auth_loginPage_getFavicon_domain>`
   :octicon:`dash` :ref:`loginPage getFavicon global <zxsuite_auth_loginPage_getFavicon_global>`
   :octicon:`dash` :ref:`loginPage getLogo domain <zxsuite_auth_loginPage_getLogo_domain>`
   :octicon:`dash` :ref:`loginPage getLogo global <zxsuite_auth_loginPage_getLogo_global>`
   :octicon:`dash` :ref:`loginPage getSkinLogoAppBanner domain <zxsuite_auth_loginPage_getSkinLogoAppBanner_domain>`
   :octicon:`dash` :ref:`loginPage getSkinLogoAppBanner global <zxsuite_auth_loginPage_getSkinLogoAppBanner_global>`
   :octicon:`dash` :ref:`loginPage getSkinLogoURL domain <zxsuite_auth_loginPage_getSkinLogoURL_domain>`
   :octicon:`dash` :ref:`loginPage getSkinLogoURL global <zxsuite_auth_loginPage_getSkinLogoURL_global>`
   :octicon:`dash` :ref:`loginPage getTitle domain <zxsuite_auth_loginPage_getTitle_domain>`
   :octicon:`dash` :ref:`loginPage getTitle global <zxsuite_auth_loginPage_getTitle_global>`
   :octicon:`dash` :ref:`loginPage setBackgroundImage domain <zxsuite_auth_loginPage_setBackgroundImage_domain>`
   :octicon:`dash` :ref:`loginPage setBackgroundImage global <zxsuite_auth_loginPage_setBackgroundImage_global>`
   :octicon:`dash` :ref:`loginPage setColorPalette domain <zxsuite_auth_loginPage_setColorPalette_domain>`
   :octicon:`dash` :ref:`loginPage setColorPalette global <zxsuite_auth_loginPage_setColorPalette_global>`
   :octicon:`dash` :ref:`loginPage setFavicon domain <zxsuite_auth_loginPage_setFavicon_domain>`
   :octicon:`dash` :ref:`loginPage setFavicon global <zxsuite_auth_loginPage_setFavicon_global>`
   :octicon:`dash` :ref:`loginPage setLogo domain <zxsuite_auth_loginPage_setLogo_domain>`
   :octicon:`dash` :ref:`loginPage setLogo global <zxsuite_auth_loginPage_setLogo_global>`
   :octicon:`dash` :ref:`loginPage setSkinLogoAppBanner domain <zxsuite_auth_loginPage_setSkinLogoAppBanner_domain>`
   :octicon:`dash` :ref:`loginPage setSkinLogoAppBanner global <zxsuite_auth_loginPage_setSkinLogoAppBanner_global>`
   :octicon:`dash` :ref:`loginPage setSkinLogoURL domain <zxsuite_auth_loginPage_setSkinLogoURL_domain>`
   :octicon:`dash` :ref:`loginPage setSkinLogoURL global <zxsuite_auth_loginPage_setSkinLogoURL_global>`
   :octicon:`dash` :ref:`loginPage setTitle domain <zxsuite_auth_loginPage_setTitle_domain>`
   :octicon:`dash` :ref:`loginPage setTitle global <zxsuite_auth_loginPage_setTitle_global>`
   :octicon:`dash` :ref:`policy list domain <zxsuite_auth_policy_list_domain>`
   :octicon:`dash` :ref:`policy list global <zxsuite_auth_policy_list_global>`
   :octicon:`dash` :ref:`policy set Cli domain <zxsuite_auth_policy_set_Cli_domain>`
   :octicon:`dash` :ref:`policy set Cli global <zxsuite_auth_policy_set_Cli_global>`
   :octicon:`dash` :ref:`policy set Dav domain <zxsuite_auth_policy_set_Dav_domain>`
   :octicon:`dash` :ref:`policy set Dav global <zxsuite_auth_policy_set_Dav_global>`
   :octicon:`dash` :ref:`policy set EAS domain <zxsuite_auth_policy_set_EAS_domain>`
   :octicon:`dash` :ref:`policy set EAS global <zxsuite_auth_policy_set_EAS_global>`
   :octicon:`dash` :ref:`policy set Imap domain <zxsuite_auth_policy_set_Imap_domain>`
   :octicon:`dash` :ref:`policy set Imap global <zxsuite_auth_policy_set_Imap_global>`
   :octicon:`dash` :ref:`policy set MobileApp domain <zxsuite_auth_policy_set_MobileApp_domain>`
   :octicon:`dash` :ref:`policy set MobileApp global <zxsuite_auth_policy_set_MobileApp_global>`
   :octicon:`dash` :ref:`policy set Pop3 domain <zxsuite_auth_policy_set_Pop3_domain>`
   :octicon:`dash` :ref:`policy set Pop3 global <zxsuite_auth_policy_set_Pop3_global>`
   :octicon:`dash` :ref:`policy set Smtp domain <zxsuite_auth_policy_set_Smtp_domain>`
   :octicon:`dash` :ref:`policy set Smtp global <zxsuite_auth_policy_set_Smtp_global>`
   :octicon:`dash` :ref:`policy set WebAdminUI domain <zxsuite_auth_policy_set_WebAdminUI_domain>`
   :octicon:`dash` :ref:`policy set WebAdminUI global <zxsuite_auth_policy_set_WebAdminUI_global>`
   :octicon:`dash` :ref:`policy set WebUI domain <zxsuite_auth_policy_set_WebUI_domain>`
   :octicon:`dash` :ref:`policy set WebUI global <zxsuite_auth_policy_set_WebUI_global>`
   :octicon:`dash` :ref:`policy set ZmWebUI domain <zxsuite_auth_policy_set_ZmWebUI_domain>`
   :octicon:`dash` :ref:`policy set ZmWebUI global <zxsuite_auth_policy_set_ZmWebUI_global>`
   :octicon:`dash` :ref:`policy trustedDevice getExpiration domain <zxsuite_auth_policy_trustedDevice_getExpiration_domain>`
   :octicon:`dash` :ref:`policy trustedDevice getExpiration global <zxsuite_auth_policy_trustedDevice_getExpiration_global>`
   :octicon:`dash` :ref:`policy trustedDevice setExpiration_domain <zxsuite_auth_policy_trustedDevice_setExpiration_domain>`
   :octicon:`dash` :ref:`policy trustedDevice setExpiration global <zxsuite_auth_policy_trustedDevice_setExpiration_global>`
   :octicon:`dash` :ref:`saml delete <zxsuite_auth_saml_delete>`
   :octicon:`dash` :ref:`saml get <zxsuite_auth_saml_get>`
   :octicon:`dash` :ref:`saml import <zxsuite_auth_saml_import>`
   :octicon:`dash` :ref:`saml update <zxsuite_auth_saml_update>`
   :octicon:`dash` :ref:`saml validate <zxsuite_auth_saml_validate>`
   :octicon:`dash` :ref:`token invalidate <zxsuite_auth_token_invalidate>`
   :octicon:`dash` :ref:`token list <zxsuite_auth_token_list>`
   :octicon:`dash` :ref:`totp delete <zxsuite_auth_totp_delete>`
   :octicon:`dash` :ref:`totp generate <zxsuite_auth_totp_generate>`
   :octicon:`dash` :ref:`totp list <zxsuite_auth_totp_list>`
   :octicon:`dash` :ref:`trustedDevice delete <zxsuite_auth_trustedDevice_delete>`
   :octicon:`dash` :ref:`trustedDevice list <zxsuite_auth_trustedDevice_list>`
