.. SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com/>
..
.. SPDX-License-Identifier: CC-BY-NC-SA-4.0

============
Zextras Auth
============

.. _what_is_zextras_auth:

What is Zextras Auth
====================

Zextras Auth is the Zextras Suite module that influences the process of
accessing a Zextras instance from the Login Page onwards, including:

1. The access modality. Depending on the authentication backends
   configured, the access mask changes, to allow user to provide their
   credentials using any of the backends. This also is reflected in the
   :ref:`auth_zxauth-zimlet`.

2. Customisations. Define how the login page looks like. See dedicated
   section :ref:`auth_custom_login_page` for a list of customisable
   items.

Zextras Auth allows to manage all the Authentication Strategies
(user/pwd, SAML, 2FA, MobilePwd, QrCode) and Service Authorizations
supported by Zextras.

This section is divided in three main parts and organised as follows.
Immediately below, you can find the description of all supported
authentication methods; the next two sections are dedicated to
:ref:`administration tasks <auth_zxauth-admins>`, which require
privileged access and are mostly carried out from the CLI, and
:ref:`everyday’s task <auth_zxauth-zimlet>`, which can be carried out
from the Web GUI by both administrators and users,
respectively. Finally, the :ref:`list of all CLI commands
<auth_zxauth-cli>` is given as a reference, with link to each command.

.. _auth_supported_authentication_methods:

Supported Authentication Methods
--------------------------------

Zextras Auth supports the following backends:

-  Self service credentials management

   -  Mobile password management

   -  Application password

-  Custom login page

-  SAML integration

-  2FA Authentication using OTP token

-  Credential Management by CLI

.. _auth_self_service_credentials_management:

Self Service Credentials Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Self-service credential management allows every user to create new
passwords and QR codes for third-parties—​for example team members,
personal assistants—​accessing her/his email account and Zextras
Applications from mobile devices.

QR Codes in particular can be used to access Zextras Apps, currently
Team and Drive.

More information and step by step guidelines can be found in Section
:ref:`auth_zxauth-zimlet`.

.. _auth_custom_login_page:

Custom Login Page
~~~~~~~~~~~~~~~~~

All Zextras functionality can be accessed upon login from the *login
page* of Zextras, which can be customised in several parts, for example
to add the company’s logo or other elements of the company’s corporate
identity.

This feature is carried out from the CLI and therefore requires
administrator privileges; more information and guidelines in section
:ref:`auth_custom_login_page`.

SAML
~~~~

The Security Assertion Markup Language (**SAML**) is an XML-based open
standard data format for exchanging authentication information. It
enables web-based authentication and authorization scenarios including
cross-domain Single Sign-On (SSO), which allows the use of the same
credentials to access different applications.

SAML implementation in Zextras relies on an external IDentity Provider
(IDP), to which a user identifies; the IDP then passes authorization
credentials to a service providers (SP). SAML authentication is the
process of verifying the user’s identity and credentials. In Zextras
Suite, SAML requires little configuration, because an administrator can
generate the SAML configuration by importing SAML metadata from the ISP.
Each domain can have a different SAML endpoint and both SDP and IDP SAML
authentication is supported.

These are the key concepts of SAML authentication:

Service Provider
   (SP) is the entity providing the service.

Identity Provider
   (IdP) is the entity providing the identities.

SAML Request
   is generated by the Service Provider to "request" an authentication.

SAML Response
   is generated by the Identity Provider and contains the assertion of
   the authenticated user.

Moreover, the Assertion Consumer Service (ACS) endpoint is a location to
which the SSO tokens are sent, according to partner requirements.

Directions on how to configure SAML and integrate other applications
in Zextras Suite is described in Section :ref:`auth_set_up_saml`.

.. _auth_two-fa:

Two Factor Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~

Two Factor Authentication (usually spelled as **2FA**) adds a security
layer to the login phase, making unwanted accesses less likely to take
place. In Zextras, this additional layer is given by an One Time
Password (OTP), which can be read as a QR code on mobile devices.

When 2FA is configured on a Zextras domain, it is mandatory to have an
OTP to be able to login: providing only username and password will fail.
Moreover, the attribute ``zimbraAuthMech`` must be configured on the
domain with for 2FA to work properly.

2FA applies only to those protocols or apps supporting it, for example
HTTP and HTTPS but not to IMAP and SMTP, and can be configured at either
device, IP, or IP range level, by means of the ``trusted_device`` or
``trusted_ip`` parameter. When an IP or IP range is trusted, 2FA will be
successful for any login originating from there, while the
``trusted_device`` requires that the same browser or app be used,
otherwise it will fail: if a 2FA login is carried out on Chrome,
accessing the same page with Firefox will require a new login.

In order to use the OTP, a domain must be configured (see
:ref:`auth_qr-code-req`) by the site admin, while users can configure
it using the :ref:`Auth Zimlet <auth_zimlet-create-otp>`.

.. seealso:: Community Article

   https://community.zextras.com/improve-the-security-using-zextras-2fa/

   This article showcases a few deployment scenarios of 2FA in Zextras
   and describes how Administrators can take advantage of such
   architecture.

.. _auth_zxauth-admins:

ZxAuth for Admins
=================

This section is dedicated to administrators and the activities they can
carry out to manage and maintain Zextras Auth. Here administrators can
find the requirements for the various authentication methods, then the
installation instructions. Credential management follows, with the
option to customise the login page at the end.

.. _auth_requirements:

Requirements
------------

.. _auth_qr-code-req:

QR Code Requirements
~~~~~~~~~~~~~~~~~~~~

The QR Code Application Password feature requires the following
properties to be set at domain level in order to be functional:

-  ``zimbraPublicServiceHostname``

-  ``zimbraPublicServicePort``

-  ``zimbraPublicServiceProtocol``

Should one or more of the properties be unset, a notification will be
delivered to the Admin reporting the affected domains and their missing
properties.

.. _auth_2fa_requirements:

2FA Requirements
~~~~~~~~~~~~~~~~

In order to properly have 2FA set up, the ``zimbraAuthMech`` attribute
bust be configured at domain level::

  zmprov modifyDomain example.com zimbraAuthMech custom:zx

To enable 2FA it is also necessary to:

- Enter the addresses of all mailbox and MTAs as
  ``ZimbraMailTrustedIp``, using the command::

    zmprov mcf +zimbramailtrustedip IP_ADDRESS

-  A ``trusted ip range`` must be defined for all services

-  For all services the ``ip_can_change`` attribute must be validated on
   ``true`` and ``2fa_policy = 1``

.. warning:: 2FA requires a specific zimbraAuthMech and this makes it
   not compatible with other mechanism such as ldap, ad or kerberos5

.. _auth_saml_requirements:

SAML Requirements
~~~~~~~~~~~~~~~~~

Before enabling SAML login, it is necessary to modify the Zextras
Backend processing, because these header attributes are required to
compose the complete URL request: **Protocol X** and **X-Port**.

The files affected by this change are the templates:

-  ``nginx.conf.web.http.default.template``

-  ``nginx.conf.web.http.template``

-  ``nginx.conf.web.https.default.template``

-  ``nginx.conf.web.https.template``

In each of them, the ``location ^~ /zx/`` code should be changed.

.. code:: nginx

   location ^~ /zx/
     {
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-Forwarded-Proto $scheme;
         proxy_set_header X-Forwarded-Port $server_port;
         proxy_pass ${web.upstream.zx};
     }

.. _auth_installing_the_zextras_auth_zimlet:

Installing the Zextras Auth Zimlet
----------------------------------

To deploy the Zextras Auth Zimlet, simply run ``zxsuite auth
doDeployAuthZimlet`` as the zimbra user on any mailbox server of your
infrastructure.

.. _auth_zxauth-login-page:

Custom Login Page
-----------------

The Auth module provides the ability to customise the Login Page as it
is seen by other user.

The login page can be set at domain level and customized in terms of
title, logo, background and favicon.

.. _auth_enabling_the_login_page:

Enabling the Login Page
~~~~~~~~~~~~~~~~~~~~~~~

To enable the Login Page for a domain (we use **example.com**), set the
``zimbraWebClientLoginURL`` and ``zimbraWebClientLogoutURL``
configuration keys. You can do so from the GUI by adding the following
two values:

::

   Web client login redirect URL:     /zx/login/page/?domain=example.com
   Web client logout redirect URL:    /zx/auth/logout/

The same action can be done by using the following CLI command, which
configures also the authentication method (``zimbraAuthMech``):

::

   zmprov md example.com zimbraAuthMech custom:zx zimbraWebClientLoginURL /zx/login/page/?domain=example.com zimbraWebClientLogoutURL /zx/auth/logout/

.. _auth_customizing_the_login_page:

Customizing the Login Page
~~~~~~~~~~~~~~~~~~~~~~~~~~

The Login Page can be customized through the use of the ``loginPage``
Auth CLI command.

.. _auth_image_file_locations_and_sizes:

Image File Locations and Sizes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Zextras Auth offers two options for custom image files used by the Login
Page, either by embedding remote image files or hosting them locally.
Image files can be used for logo, background, and favicon.

.. grid::
   :gutter: 3

   .. grid-item-card::
      :class-header: sd-font-weight-bold

      Remote File
      ^^^^

      The image is available on a public online resource (like, e.g.,
      a corporate server or a hosting service) and can be directly
      accessed. When adopting this approach, use the full URL to the
      resource in the CLI command, for example:
      ``https://www.example.com/resources/logo.png``

      .. hint:: This is the preferred alternative.

   .. grid-item-card::
      :class-header: sd-font-weight-bold

      Local File
      ^^^^

      The image is hosted locally and must be stored in a directory
      under ``/opt/zimbra/jetty/webapps/zimbra/public/``. When
      configuring it, the relative path to the file from the
      ``/opt/zimbra/jetty/webapps/zimbra/`` base path must be used. If
      the file is saved as
      ``/opt/zimbra/jetty/webapps/zimbra/public/logo.png``, then use
      ``/public/logo.png``

The optimal size for a logo image is 320x80 pixels. Other sizes can be
used but the logo image could be stretched or scaled resulting in poor
quality. The aspect ratio of 4:1 should always be maintained.

While the optimal size for the background image depends on the
resolution of the client’s screen, it’s stongly advised to avoid images
smaller than the current standard monitor resolutions to avoid vertical
or horizontal bars to be displayed on screens with a bigger resolution
than the background image.

.. _auth_login_page_title:

Login Page Title
^^^^^^^^^^^^^^^^

The login page title can be modified by using either of the following
commands:

- **Global** level by using :ref:`zxsuite auth loginPage setTitle global
  <zxsuite_auth_loginPage_setTitle_global>` ::

     zxsuite auth loginPage setTitle global 'My Custom Login Page'

- **Domain** level by using :ref:`zxsuite auth loginPage setTitle
  domain <zxsuite_auth_loginpage_setTitle_domain>` ::

    zxsuite auth loginPage setTitle domain example.com 'My Custom Login Page'

.. _auth_viewing_the_current_configuration:

Viewing the current configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The current Login Page settings for a domain can be viewed by using the
:ref:`zxsuite auth loginPage getConfig
domain <zxsuite_auth_loginpage_getConfig_domain>` command::

   $ zxsuite auth loginPage getConfig domain example.com

           zimbraPublicServiceHostname                         mail.example.com
           loginPageBackgroundImage                            /public/background.jpg
           zimbraPublicServicePort                             443
           zimbraPublicServiceProtocol                         https
           zimbraDomainName                                    example.com
           publicUrl                                           https://mail.example.com
           loginPageLogo                                       /public/logo.png

.. _policy-management-2fa:

Setting up Policy Management for 2FA
------------------------------------

Zextras Auth introduced the `second factor` as part of the service
authentication strategy. At domain or at global level, each service
can either:

* be enabled or disabled for the 2FA
* have its own Trusted Networks    

When enabled, the connection can be established only if the **source
is trusted**, which means that the connection originates either from a
**trusted network**, manually configured by the admin for the service,
or from a previously trusted IP or device, depending on the **2FA
policy configured for the service**.

If none of the above conditions holds, the service must ask for the
OTP, used as the second factor. If the service does not support the
second factor, or is not able to interact with the user for it, the
authentication process **fails**. For example, IMAP is a service not
supporting OTP and therefore 2FA can not be used with it.  Otherwise,
when the user provides a valid OTP, the current user’s device and IP
are stored in the Trusted Device table

Moreover, depending on the service policy, the connection should be
valid even if the IP has been trusted by another service.

2FA Policy Management is a rather advanced technique which avoids the
use of OTP in all cases when an authentication request is received
from a device that is already in the Trusted Networks or Trusted
Devices tables.

To set up and manage 2FA Policies, several CLI commands are available.

.. grid::
   :gutter: 3

   .. grid-item-card::
      :columns: 4
      :class-header: card-abyss
                
      Display policies
      ^^^^

      The command :command:`zxsuite auth policy list` returns the list of 2FA
      by domain, with option to filter specific services.

      |ex|

      .. code:: console

         zxsuite auth policy list domain example.com service EAS

      Shows 2FA setting for domain **example.com** and for service
      **EAS**.

      |ex|
      
      .. code:: console

         zxsuite auth policy list global

      Display for which services 2FA can be enabled. As a bonus, the
      output contains a lists of **all** supporter services, which
      fall in:

      * standard protocols or technologies (CLI, |dav|, |eas|, |imap|,
        |pop|, and |smtp|)
      * related to |zx| Zimbra components (MobileApp, WebAdminUI,
        WebUI, ZmWebUI).
      
      ++++

      Reference: :ref:`policy list domain <zxsuite_auth_policy_list_domain>`
      :octicon:`dash` :ref:`policy list global
      <zxsuite_auth_policy_list_global>`
         
   .. grid-item-card:: 
      :columns: 4
      :class-header: card-abyss

      Manage policies
      ^^^^
      
      The command :command:`zxsuite auth policy set` enables or
      disables a service and accepts the following three optional
      parameters:

      ``ip_can_change``                     
         This attribute allows the server to deny connection requests
         coming from an IP other than the one used during the
         authentication. As an example, suppose that authentication
         was successfully carried out from a device with IP
         192.168.1.72 and for any reason the IP of the device changes
         (e.g., a laptop moved to a different subnet). If
         ``ip_can_change`` is set to **true**, then the device is
         still authenticated and connections are allowed, otherwise,
         if ``ip_can_change`` is set to **false**, authentication is
         invalidated and no connection is allowed for the device until
         a new authentication.

      ``trusted_ip_range``
         It defines the **Trusted Networks**, a set of IP ranges
         configured for each service (like e.g., DAV, EAS, SMTP, and
         more). If a connection comes from an IP in the Trusted
         Networks, the authentication will not require the second
         factor validation, independently from the policy specified,
         but users will be authenticated with username and password.

      ``2fa_policy``
         This parameter determines how 2FA policies are enforced for
         each service and takes one of these three integer values:

         * **0** (no_2fa): 2FA authentication is disabled for the
           service

         * **1** (ip_2fa): Trust the **IP** from which the connection
           starts. All the subsequent logins from the same IP will not
           require the second factor.

         * **2** (device_2fa): Trust the **device** from which the
           connection starts. All the subsequent logins from the same
           device (that is, same browser or Mobile App) will not
           require the second factor.

      These parameters are supported by all services.
      
      +++++
         
      Reference: :ref:`policy set Cli domain
      <zxsuite_auth_policy_set_Cli_domain>` :octicon:`dash`
      :ref:`policy set Cli global
      <zxsuite_auth_policy_set_Cli_global>` and following commands for
      the services listed in the `Display policy` panel.
      
      
   .. grid-item-card::
      :columns: 4
      :class-header: card-abyss

      Manage expiration time 
      ^^^^

      Two commands help to check and define the expiration time of
      trusted devices.

      .. card::

         :command:`zxsuite auth policy TrustedDevice getExpiration`
         ^^^^
         
         Check the current policy for expiration time, i.e., for how
         long a device will be considered as trusted. The number of
         **days** is returned. The command acts at domain and global
         level.

         .. rubric:: Example

         .. code:: console

            zxsuite auth policy trustedDevice getExpiration domain example.com

         Show how many days is the expiration time for `example.com`.
         
         .. rubric:: Example

         .. code:: console

            zxsuite auth policy trustedDevice getExpiration global

         Show how many days is the expiration time for the whole
         infrastructure.

         ++++

         Reference: :ref:`trustedDevice getExpiration domain
         <zxsuite_auth_policy_trustedDevice_getExpiration_domain>`
         :octicon:`dash` :ref:`policy trustedDevice getExpiration
         global
         <zxsuite_auth_policy_trustedDevice_getExpiration_global>`
         
      .. card::

         :command:`zxsuite auth policy TrustedDevice setExpiration`
         ^^^^
         
         Define the current policy for expiration time, i.e., for how
         long a device will be considered as trusted. The number of
         **days** is required. The command acts at domain and global
         level.

         .. rubric:: Example

         .. code:: console

            zxsuite auth policy trustedDevice setExpiration domain example.com 20

         Defines the expiration time for domain example.com to **20 days**.
            
         ++++
         
         Reference: :ref:`trustedDevice setExpiration_domain
         <zxsuite_auth_policy_trustedDevice_setExpiration_domain>`
         :octicon:`dash` :ref:`trustedDevice setExpiration global
         <zxsuite_auth_policy_trustedDevice_setExpiration_global>`


         
.. _auth_set_up_saml:

Setting up SAML Configuration
-----------------------------

To integrate a SAML application into Zextras, you need to configure the
SAML IDP (IDentity Provider) using the Zextras SAML SP data. In our
sample scenario, we want to add SAML authentication to our domain
**example.com**, accessible at **SP_URL**.

The SAML configuration is carried out at an IDP provider, then imported
in Zextras Suite using a dedicated command.

The most important configuration options are the following. You should
configure them on the SAML IDP side.

``sp.entityid``
   **https://SP_URL/zx/auth/samlMetadata?domain=example.com**

``sp.assertion_consumer_service.url``
   **https://SP_URL/zx/auth/saml**

``sp.nameidformat``
   **urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress**

In order to validate against Zextras, make sure that the *Name of the
attribute that is used as* ``NameID`` is set to **mailPrimaryAddress**.

You can now integrate a SAML application in Zextras in two ways, either
automatic or manual. The following sections describe each method in
detail.

.. _auth_import_saml_configuration_automatically:

Import SAML Configuration Automatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SAML IDP provides a URL from which to download the configuration;
assuming that this URL is
https://my-saml-provider.org/simplesaml/saml/idp/metadata.php, you can
import the configuration using the command:

.. code:: bash

   zxsuite auth saml import example.com URL  https://my-saml-provider.org/simplesaml/saml/idp/metadata.php

.. note:: The URL supplied by the SAML IDP for an unsecured connection
   may be slight different from the previous one, like in our example.

.. code:: bash

   zxsuite auth saml import example.com url https://localidp.local.loc/app/xxxxxxxxxxxxxxx/sso/saml/metadata allow_unsecure true

You are now DONE! You can see the :bdg-primary-line:`LOGIN SAML` button on the login page.

.. figure:: /img/suite/saml-login.png
   :scale: 50%

   Login page with enabled SAML.

By clicking it, you will be redirect to the SAML IDP login page.

.. _auth_import_saml_configuration_manually:

Import SAML Configuration Manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you need to manually edit the SAML configuration, you need to
follow this 4-step procedure. In a nutshell, you need to export the
default SAML settings, modify them, then save and import them back.

.. grid::
   :gutter: 3

   .. grid-item-card::
      :columns: 6

      Step 1. Export the default SAML settings
      ^^^^^

      In order to export the default SAML setting, use

      .. code:: bash

         zxsuite auth saml get example.com export_to /tmp/saml.json

   .. grid-item-card::
      :columns: 6

      Step 2. Modify :file:`/tmp/saml.json`
      ^^^^^

      Open the resulting file :file:`/tmp/saml.json` in any editor and modify
      the requested attributes:


      - ``entityid``

      - ``assertion_consumer_service.url``

      - ``nameidformat``

   .. grid-item-card::
      :columns: 6

      Step 3. Check modified  :file:`/tmp/saml.json`
      ^^^^^

      The :file:`/tmp/saml.json`` file should look similar to this
      one:
      
      .. dropdown:: Simple ``saml.json`` file
         :open:

         .. code-block:: json
            :linenos:

            {
              "sp.entityid":"https://SP_URL/zx/auth/samlMetadata?domain=example.com",
              "sp.assertion_consumer_service.url":"https://SP_URL/zx/auth/saml",
              "sp.nameidformat":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
              "sp.assertion_consumer_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
              "sp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "sp.single_logout_service.url":"https://SP_URL/?loginOp=logout",
              "sp.x509cert":"aabbcc",

              "idp.entityid":"https://IDP-URL/simplesamlphp/saml2/idp/metadata.php",
              "idp.x509cert":"xxyyzz",
              "idp.single_sign_on_service.url":"https://IDP-URL/simplesamlphp/saml2/idp/SSOService.php",
              "idp.single_sign_on_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
              "idp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",

              "organization.name":"ACME, INC.",
              "organization.displayname":"Example",
              "organization.url":"https://www.example.com/",

              "security.requested_authncontextcomparison":"exact",
              "security.requested_authncontext":"urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password",
              "security.signature_algorithm":"http://www.w3.org/2000/09/xmldsig#rsa sha1",
              "security.want_nameid_encrypted":"false",
              "security.want_assertions_encrypted":"false",
              "security.want_assertions_signed":"false","debug":"true",
              "security.want_messages_signed":"false",
              "security.authnrequest_signed":"false",
              "security.want_xml_validation":"true",
              "security.logoutrequest_signed":"false"
              "security.logoutresponse_signed":"false",
            }


      Values appearing in the above code excerpt are taken from the
      example in the previous section. Certificates must be valid,
      they are omitted for clarity.

   .. grid-item-card::
      :columns: 6

      Step 4. Save the changes
      ^^^^^^

      The final step is to save the changes made to the file and import
      it into Zextras Suite using the command:

      .. code:: bash

         zxsuite auth saml import example.com file /tmp/saml.json

      .. hint:: It is also possible to view or edit single attributes
         by using the ``zxsuite auth saml get`` and ``zxsuite auth saml
         set`` command options.

Configure SAML Logout
~~~~~~~~~~~~~~~~~~~~~

Some SAML IDP provider require that also the logout procedure be
signed. In case you had already configured SAML, you can proceed in a
similar fashion as described in the :ref:`previous section
<auth_import_saml_configuration_manually>`: export the configuration,
modify it, then import it again.

Here we show how to add signed logout to the configuration used in the
previous section, by modifying the configuration file
:file:`saml.json` presented there.

.. note:: We also report below the configuration file presented in the
   previous section, modified according to the procedure described
   below and with the lines interested by the changes highlighted. The
   line numbers are those

First, you need to configure the SAML IDP logout service URL (line
**7**, :bgreen:`sp.single_logout_service.url`). We use :abbr:`okta
(www.okta.com)` as example SAML IDP provider, so the URL will be
similar to https://mycompany.okta.com/app/test/app_id/slo/saml.

Then, configure also the service provider's certificate,
:bgreen:`sp.x509cert` (line **8**), which however should be already
present.

At this point, you should be done and you can import the modified
configuration file.

However, in case the SAMP IDP requires that also the requests be
signed, or in case to sign the requests for security reasons, please
follow these additional steps.

* Create a new X509 certificate and register it to the SAML IDP. You
  can use a command similar to the following one to create one with
  :command:`openssl`

  .. code-block:: console

     # openssl req -x509 -sha256 -nodes -days 365  \
     -newkey rsa:2048 -keyout privateKey.key -out certificate.crt

* Add to the configuration file the certificate as
  :bgreen:`sp.x509cert` and the private key as :bgreen:`sp.privatekey`
  (lines **8** and **9** respectively)

* Enable the signature generation, that is, set
  :bgreen:`security.logoutrequest_signed` to ``true`` (line **30**)

* You can also optionally enable the signature for the login request,
  by setting :bgreen:`security.authnrequest_signed` ``to true`` (line
  **32**)

  
.. dropdown:: ``saml.json`` file with signed logout and requests.
   :open:

   .. code-block:: json
      :linenos:
      :emphasize-lines: 7,8,9,30,32

      {
        "sp.entityid":"https://SP_URL/zx/auth/samlMetadata?domain=example.com",
        "sp.assertion_consumer_service.url":"https://SP_URL/zx/auth/saml",
        "sp.nameidformat":"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
        "sp.assertion_consumer_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
        "sp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
        "sp.single_logout_service.url":"https://mycompany.okta.com/app/test/app_id/slo/saml",
        "sp.x509cert":"aabbcc",
        "sp.privatekey":"ddeeff",

        "idp.entityid":"https://IDP-URL/simplesamlphp/saml2/idp/metadata.php",
        "idp.x509cert":"xxyyzz",
        "idp.single_sign_on_service.url":"https://IDP-URL/simplesamlphp/saml2/idp/SSOService.php",
        "idp.single_sign_on_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
        "idp.single_logout_service.binding":"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",

        "organization.name":"ACME, INC.",
        "organization.displayname":"Example",
        "organization.url":"https://www.example.com/",

        "security.requested_authncontextcomparison":"exact",
        "security.requested_authncontext":"urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password",
        "security.signature_algorithm":"http://www.w3.org/2000/09/xmldsig#rsa sha1",
        "security.want_nameid_encrypted":"false",
        "security.want_assertions_encrypted":"false",
        "security.want_assertions_signed":"false","debug":"true",
        "security.want_messages_signed":"false",
        "security.authnrequest_signed":"false",
        "security.want_xml_validation":"true",
        "security.logoutrequest_signed":"true"
        "security.logoutresponse_signed":"true",
        "security.authnrequest_signed":"true",
      }

.. _temp_auth_link:

Temporary Auth Link
-------------------

A typical user-management task that an administrator needs to carry
out is to allow the first access to the company's infrastructure to a
new colleague or employee.

When 2FA is enabled on the mailstore, a new user can not login
immediately, therefore the solution is to provide a temporary link
(*auth link*) that allows the user to access and configure 2FA.

Administrators can generate a auth link easily from the
Administration GUI:

#. In the user's **General Information** section, in box called
   *Temporary link*, click the :bdg:`Create a temporary link` button

#. A URL link will be shown in an overlay window and can be copied by
   clicking on the accompanying button

#. The link can then be sent to the new user

#. The user must access the mailbox within 12 hours before the link
   expires

.. _auth_zxauth-zimlet:

ZxAuth for users (Auth Zimlet)
==============================

Zextras Auth features a dedicated zimlet (see :numref:`auth-zimlet`)
to manage all user-side credential and features, such as the account
and EAS Mobile Passwords, Mobile App QR Codes, and OTP for
:ref:`auth_two-fa`.

.. _auth_zextras_auth_zimlet_overview:

Zextras Auth Zimlet overview
----------------------------

The Zextras Auth Zimlet can be accessed from the "Zimlets" section of
the Zimbra Web Client. Users do not need any CLI access to use the
Zextras Auth.

The creation of a new credential allows to give access to the account,
possibly including the Zextras Mobile Apps, to other persons without
having to share the personal credentials.

.. _auth-zimlet:

.. figure:: /img/auth/authpage.png
   :scale: 50%

   The |suite| Auth zimlet.

From the zimlet, the user can:

- **Change the password** of the current logged in user

- **Add new credentials** in the dedicated pages, accessible by
  clicking *Exchange ActiveSync*, *Mobile Apps*, or *OTP
  Authentication*

- **Check the status** and other information for all `Exchange
  ActiveSync` and `Mobile Apps` credential created. In each section,
  entries in the list display the label of the password, its status,
  the service it is valid for, and its creation date.

- **Check the status** and other information for every `One Time
  Password` created. Here, each entry shows a description, its status,
  the failed attempts, and its creation date.

- **Manage** the 2FA access. Each user can decide whether to enforce
  access using 2FA, unless its use has been enabled or disabled at
  COS, domain, or global level.
   
- **Delete** any credential created

.. important:: Users can in no case modify their assigned credentials,
   change the password of credentials they generate, or modify any
   property of the credential. Limited editing of a credential is
   strictly limited to the administrators.

In the remainder of this section, we give an overview of the various
possibilities to create new credentials and provide instruction to add
or delete them them.

.. _auth_change_pass:

Change Password
---------------

In order to change password, access the Auth zimlet and click **change
password**. Here, you need to provide the current password, then enter
twice a new one.

.. hint:: Make sure you use a robust password, which includes
   lowercase and uppercase letters, numbers, characters, and is at
   least ***8** characters long.

To save the new password, click the blue :bdg-primary-line:`CHANGE
PASSWORD` button.

.. _auth_zimlet-create-eas:

.. _auth_zimlet-create-mobile:

Create New Credentials: EAS
---------------------------

To create a new Password for :abbr:`EAS (Exchange ActiveSync)` service, open the
Zextras Auth Zimlet and click `Exchange ActiveSync`, then
:bdg-primary-line:`NEW AUTHENTICATION +`.

Here, enter an easy to remember identifier for the password in the
*Authentication description* field.

.. figure:: /img/auth/eas1.png
   :scale: 50%
           
Then click :bdg-primary:`CREATE PASSWORD`: the new Mobile Password
will be displayed.

  .. figure:: /img/auth/eas2.png
     :scale: 50%

Finally, click the :bdg-primary-line:`COPY PASSWORD` button to copy
the password to the clipboard.

.. warning:: Mobile Passwords are randomly generated and cannot be
   displayed again after the creation is complete.

Click :bdg-primary:`DONE` to close the Zextras Auth window. An entry
for the new Mobile Password is now visible in the *Active Passwords*
list of the Zextras Auth Zimlet.

.. _auth_create_new_credentials_qr_code:

Create New Credentials: Mobile Apps
-----------------------------------

Zextras Auth can speed up and manage Zextras Application logins, such
as those for the :ref:`Team Mobile App <team_mobile_app>` and
:ref:`Drive Mobile App <drive_mobile_app>`.

This is achieved through the creation of a QR Code, which the user can
then scan from the App’s login page to log in. The procedure is very
similar to the one described in the previous section.

.. warning:: QR Codes are a one-time credential only, meaning that
   once generated it will grant access to the app until the relevant
   credential itself is deleted from the account. Once generated, the
   QR Code can only be viewed once.

In order to create a new QR Code for Mobile Application, open the
Zextras Auth Zimlet and click `Mobile Apps`, then
:bdg-primary-line:`NEW AUTHENTICATION +`.

Here, enter an easy to remember identifier for the password in the
*Authentication description*.
  
.. commenting out due to a description error in the modal
   .. figure:: /img/auth/qrcode1.png
      :scale: 50%

Click :bdg-primary:`CREATE PASSWORD` and the new QR code for Mobile
Application will be displayed. You can use the Zextras mobile app to
frame the code and grant access to the app.

.. warning:: QR Codes are randomly generated and cannot be displayed
   again after the creation is complete.

Click on :bdg-primary:`DONE` to close the Zextras Auth window. An
entry for the new Mobile Application is now visible in the *Active
Passwords* list of the Zextras Auth Zimlet.

.. _auth_zimlet-create-otp:

Create New Credentials: OTP
---------------------------

In order to create a new One Time Password access, open the Zextras
Auth Zimlet and click **OTP Authentication**, then
:bdg-primary-line:`NEW OTP +` to open a dialog in which you have to
enter a unique label to identify the OTP.

.. figure:: /img/auth/otp1.png
   :scale: 50%

You will be presented with the QR code and a list of PIN codes to be
used for authentication.

.. grid::

   .. grid-item::

      .. figure:: /img/auth/otp2a.png
         :scale: 50%

   .. grid-item::

      .. figure:: /img/auth/otp2b.png
         :scale: 50%

Next, click the :bdg-primary-line:`PRINT PIN CODES` button to print the
codes on paper or to a file. The printed document includes all the
codes, the username/e-mail address for which they are valid and
instructions to use them.

.. figure:: /img/auth/otp3.png
   :scale: 50%
   :align: center

.. warning:: QR codes and their associated PINs are randomly generated
   and cannot be displayed again after the creation is complete.

Finally, click :bdg-primary:`DONE` to close the Zextras Auth
window. An entry for the new OTP entry will be shown in the list.

.. note:: The *Description* is automatically created using the email
   address to which it is associated.

.. _auth_delete_credentials:

Delete Credentials
------------------

In order to delete a credential, simply select it from the list of
Active passwords or OTPs, and click the :bdg-danger-line:`DELETE x`
button:

.. image:: /img/auth/delete_credential.png

Click :bdg-danger:`YES` to confirm the removal of the credential.

.. _auth_zxauth-cli:

Zextras Auth CLI
================

This section contains the index of all ``zxsuite auth`` commands. Full
reference can be found in the dedicated section
:ref:`zextras_auth_full_cli`.

:ref:`credential add <zxsuite_auth_credential_add>`
:octicon:`dash` :ref:`credential delete <zxsuite_auth_credential_delete>`
:octicon:`dash` :ref:`credential list <zxsuite_auth_credential_list>`
:octicon:`dash` :ref:`credential update <zxsuite_auth_credential_update>`
:octicon:`dash` :ref:`doDeployAuthZimlet <zxsuite_auth_doDeployAuthZimlet>`
:octicon:`dash` :ref:`doRestartService <zxsuite_auth_doRestartService>`
:octicon:`dash` :ref:`doStartService <zxsuite_auth_doStartService>`
:octicon:`dash` :ref:`doStopService <zxsuite_auth_doStopService>`
:octicon:`dash` :ref:`enforce2FA get account <zxsuite_auth_enforce2FA_get_account>`
:octicon:`dash` :ref:`enforce2FA get cos <zxsuite_auth_enforce2FA_get_cos>`
:octicon:`dash` :ref:`enforce2FA set account <zxsuite_auth_enforce2FA_set_account>`
:octicon:`dash` :ref:`enforce2FA set cos <zxsuite_auth_enforce2FA_set_cos>`
:octicon:`dash` :ref:`getServices <zxsuite_auth_getServices>`
:octicon:`dash` :ref:`loginPage getBackgroundImage domain <zxsuite_auth_loginPage_getBackgroundImage_domain>`
:octicon:`dash` :ref:`loginPage getBackgroundImage global <zxsuite_auth_loginPage_getBackgroundImage_global>`
:octicon:`dash` :ref:`loginPage getColorPalette domain <zxsuite_auth_loginPage_getColorPalette_domain>`
:octicon:`dash` :ref:`loginPage getColorPalette global <zxsuite_auth_loginPage_getColorPalette_global>`
:octicon:`dash` :ref:`loginPage getConfig domain <zxsuite_auth_loginPage_getConfig_domain>`
:octicon:`dash` :ref:`loginPage getConfig global <zxsuite_auth_loginPage_getConfig_global>`
:octicon:`dash` :ref:`loginPage getFavicon domain <zxsuite_auth_loginPage_getFavicon_domain>`
:octicon:`dash` :ref:`loginPage getFavicon global <zxsuite_auth_loginPage_getFavicon_global>`
:octicon:`dash` :ref:`loginPage getLogo domain <zxsuite_auth_loginPage_getLogo_domain>`
:octicon:`dash` :ref:`loginPage getLogo global <zxsuite_auth_loginPage_getLogo_global>`
:octicon:`dash` :ref:`loginPage getSkinLogoAppBanner domain <zxsuite_auth_loginPage_getSkinLogoAppBanner_domain>`
:octicon:`dash` :ref:`loginPage getSkinLogoAppBanner global <zxsuite_auth_loginPage_getSkinLogoAppBanner_global>`
:octicon:`dash` :ref:`loginPage getSkinLogoURL domain <zxsuite_auth_loginPage_getSkinLogoURL_domain>`
:octicon:`dash` :ref:`loginPage getSkinLogoURL global <zxsuite_auth_loginPage_getSkinLogoURL_global>`
:octicon:`dash` :ref:`loginPage getTitle domain <zxsuite_auth_loginPage_getTitle_domain>`
:octicon:`dash` :ref:`loginPage getTitle global <zxsuite_auth_loginPage_getTitle_global>`
:octicon:`dash` :ref:`loginPage setBackgroundImage domain <zxsuite_auth_loginPage_setBackgroundImage_domain>`
:octicon:`dash` :ref:`loginPage setBackgroundImage global <zxsuite_auth_loginPage_setBackgroundImage_global>`
:octicon:`dash` :ref:`loginPage setColorPalette domain <zxsuite_auth_loginPage_setColorPalette_domain>`
:octicon:`dash` :ref:`loginPage setColorPalette global <zxsuite_auth_loginPage_setColorPalette_global>`
:octicon:`dash` :ref:`loginPage setFavicon domain <zxsuite_auth_loginPage_setFavicon_domain>`
:octicon:`dash` :ref:`loginPage setFavicon global <zxsuite_auth_loginPage_setFavicon_global>`
:octicon:`dash` :ref:`loginPage setLogo domain <zxsuite_auth_loginPage_setLogo_domain>`
:octicon:`dash` :ref:`loginPage setLogo global <zxsuite_auth_loginPage_setLogo_global>`
:octicon:`dash` :ref:`loginPage setSkinLogoAppBanner domain <zxsuite_auth_loginPage_setSkinLogoAppBanner_domain>`
:octicon:`dash` :ref:`loginPage setSkinLogoAppBanner global <zxsuite_auth_loginPage_setSkinLogoAppBanner_global>`
:octicon:`dash` :ref:`loginPage setSkinLogoURL domain <zxsuite_auth_loginPage_setSkinLogoURL_domain>`
:octicon:`dash` :ref:`loginPage setSkinLogoURL global <zxsuite_auth_loginPage_setSkinLogoURL_global>`
:octicon:`dash` :ref:`loginPage setTitle domain <zxsuite_auth_loginPage_setTitle_domain>`
:octicon:`dash` :ref:`loginPage setTitle global <zxsuite_auth_loginPage_setTitle_global>`
:octicon:`dash` :ref:`policy list domain <zxsuite_auth_policy_list_domain>`
:octicon:`dash` :ref:`policy list global <zxsuite_auth_policy_list_global>`
:octicon:`dash` :ref:`policy set Cli domain <zxsuite_auth_policy_set_Cli_domain>`
:octicon:`dash` :ref:`policy set Cli global <zxsuite_auth_policy_set_Cli_global>`
:octicon:`dash` :ref:`policy set Dav domain <zxsuite_auth_policy_set_Dav_domain>`
:octicon:`dash` :ref:`policy set Dav global <zxsuite_auth_policy_set_Dav_global>`
:octicon:`dash` :ref:`policy set EAS domain <zxsuite_auth_policy_set_EAS_domain>`
:octicon:`dash` :ref:`policy set EAS global <zxsuite_auth_policy_set_EAS_global>`
:octicon:`dash` :ref:`policy set Imap domain <zxsuite_auth_policy_set_Imap_domain>`
:octicon:`dash` :ref:`policy set Imap global <zxsuite_auth_policy_set_Imap_global>`
:octicon:`dash` :ref:`policy set MobileApp domain <zxsuite_auth_policy_set_MobileApp_domain>`
:octicon:`dash` :ref:`policy set MobileApp global <zxsuite_auth_policy_set_MobileApp_global>`
:octicon:`dash` :ref:`policy set Pop3 domain <zxsuite_auth_policy_set_Pop3_domain>`
:octicon:`dash` :ref:`policy set Pop3 global <zxsuite_auth_policy_set_Pop3_global>`
:octicon:`dash` :ref:`policy set Smtp domain <zxsuite_auth_policy_set_Smtp_domain>`
:octicon:`dash` :ref:`policy set Smtp global <zxsuite_auth_policy_set_Smtp_global>`
:octicon:`dash` :ref:`policy set WebAdminUI domain <zxsuite_auth_policy_set_WebAdminUI_domain>`
:octicon:`dash` :ref:`policy set WebAdminUI global <zxsuite_auth_policy_set_WebAdminUI_global>`
:octicon:`dash` :ref:`policy set WebUI domain <zxsuite_auth_policy_set_WebUI_domain>`
:octicon:`dash` :ref:`policy set WebUI global <zxsuite_auth_policy_set_WebUI_global>`
:octicon:`dash` :ref:`policy set ZmWebUI domain <zxsuite_auth_policy_set_ZmWebUI_domain>`
:octicon:`dash` :ref:`policy set ZmWebUI global <zxsuite_auth_policy_set_ZmWebUI_global>`
:octicon:`dash` :ref:`policy trustedDevice getExpiration domain <zxsuite_auth_policy_trustedDevice_getExpiration_domain>`
:octicon:`dash` :ref:`policy trustedDevice getExpiration global <zxsuite_auth_policy_trustedDevice_getExpiration_global>`
:octicon:`dash` :ref:`policy trustedDevice setExpiration_domain <zxsuite_auth_policy_trustedDevice_setExpiration_domain>`
:octicon:`dash` :ref:`policy trustedDevice setExpiration global <zxsuite_auth_policy_trustedDevice_setExpiration_global>`
:octicon:`dash` :ref:`saml delete <zxsuite_auth_saml_delete>`
:octicon:`dash` :ref:`saml get <zxsuite_auth_saml_get>`
:octicon:`dash` :ref:`saml import <zxsuite_auth_saml_import>`
:octicon:`dash` :ref:`saml update <zxsuite_auth_saml_update>`
:octicon:`dash` :ref:`saml validate <zxsuite_auth_saml_validate>`
:octicon:`dash` :ref:`token invalidate <zxsuite_auth_token_invalidate>`
:octicon:`dash` :ref:`token list <zxsuite_auth_token_list>`
:octicon:`dash` :ref:`totp delete <zxsuite_auth_totp_delete>`
:octicon:`dash` :ref:`totp generate <zxsuite_auth_totp_generate>`
:octicon:`dash` :ref:`totp list <zxsuite_auth_totp_list>`
:octicon:`dash` :ref:`trustedDevice delete <zxsuite_auth_trustedDevice_delete>`
:octicon:`dash` :ref:`trustedDevice list <zxsuite_auth_trustedDevice_list>`
